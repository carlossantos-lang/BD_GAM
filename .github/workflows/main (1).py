# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Akf2uiFOo4RjC5dV-kMqnkrHZrSOBntw
"""

import json
import requests
import gspread
import time
from google.oauth2.service_account import Credentials

# =========================
# INÍCIO DO TIMER
# =========================
start_time = time.time()

# =========================
# CONFIGURAÇÕES
# =========================
SHEET_NAME = "BD - GAM"
SPREADSHEET_ID = "1Lh9snLOrHPFs6AynP5pfSmh3uos7ulEOiRNJKKqPs7s"
DATE_STRING = "2025-09-29"  # altere conforme necessário
API_URL = "https://my.spun.com.br/api/admanager/data"

# =========================
# TOKENS DIRETO NO SCRIPT
# =========================
API_TOKEN = "8jwl4v1ZmBYQlwFzPPEHNkYC8IOvRxB3ino1665b93f36cd228"

google_creds = {
    "type": "service_account",
    "project_id": "teste-spun",
    "private_key_id": "1b6080eedcb6da9a3c429ad2135a8ffcb0f2ff71",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7r+wP7qP/4jmD\narGPkF7oAw460lQVtHfPkfdyp3+2H/LoUMyvLCJ3CR+CM5uH3qgFvth63Ojrbptj\nrTsnWuWBBl+ewaFMVpWaezo2qLu1G0TPJeVyhPxi3+1bliG7Krsef3a9oGvEhaVS\nTBilIsCdKBcf5g8X5rHdMcnrYzbDXuN2oDP94SKyMZwlfYcobvT7ouYyIqav2GLO\njc830cY1Z67ycYUWDKonDEtEpnj4cwlNlHCl98bUlLU7tQMYmOUCyBNFmohM1u+3\n3qPn6VoHO1JiIUFOBKk8gmjPdjACTHvG/TlcVzPtNvCXIFXZH/Dl3Bv0AtDikqkG\nKu8W4lu3AgMBAAECggEAQjRoiygtPm5AxlwE3TTaXXHye4pEsdFSb+w3woBWGtrD\nNvKFeQcS8zVLIYTtyGwgjcJHn3M8UAvYkT0CgDved/hVE22O5ZwnMnJkUvKLH/PJ\n/l4KRS6mzoPZuLRJGroUfkoNCw/C4/QWoGSKTvnmwqjpG03uJgqw0+sjpD3/i8Na\nxQfLF79mgIudXi5D4hSyto9ElIfKrTnMClqXLhkfr9jUpD78gU37S88Ctknb4To6\nxP9YOcLAYTBBrBpWHuyA7nwULn9VZ/qQuAjQS1KqBiI+mKcdz5q9NLzyzKAu/+XV\nGKoThLxuvdoZ4wm9crg2Teu5cs4SKyxccpYziUsJ/QKBgQDen34pUjn5NGzgJyic\nKYPfojFPv+K4PaLMiqNxJ75s0zhjH1FOtpfcBHGnQwPrSDoG+9d5b4RHR+5UpqMu\n8pivLx2//qAsrbWOnKUhEC8Bfz7MpvRqmH+Rb/jCn6JHo9G4jaMXJXQtYsAMQtcP\n2TElYP58qPNLFDBDOHHMrXuf6wKBgQDX044wCe+X66GIEJuOsmQ3lNVBpRdcK9oR\n02XoNQaT7QMUESTBZBL/78hgHswViTgmn1eugY9UsblD6ePJYbtaxl787CT6CnKP\nQtdN8Pt5EBp1QR9KTRZYaktRzDJIhcKo4of19x/CqRXcLtEAGK/HZ1IBIs/+Ap/+\no9zB9sfMZQKBgQDK/uX8acUBLsOkdTB7jQN5tRx/2rmyREmhdz1nndTuyH8fK1xp\niOfaMJct7FazgQ2gdp3ZVk1o7fctazFbSszc2PqoqlaFxvPJkZ6lEmu6UrwBwq8W\nT+3qwQ408Xj5GDDQtx4iqf1QsT3rMDuIcQR2UAZdx3TpXgRQFzT1bK9QdwKBgQDK\nQv7b0lPxgeetxjKiNlhpJlf83yTXQllpnz2/sgHqG5Jo+fACNTEBHcwhGHuWKzSu\nLWJUriKO8sd29/h7P9X/KizWxs+YbLYTwEZaSt7BA/BntpIGZdvtHCBeFgmBoald\n8H4OanwfR6qu4EkJ2BjTvOZDHkbh+7/JOfOm6wkvaQKBgQC3gwCIaJOp9zagSj/c\nY5SF2e7VGRPBjgCIl6aknnkLsLwEhLgDyM+tBNn+0h5hQbrfogUwlNMwYIRmhlIc\njX84pdx8Cj2wXhEJeNfkPjHdjbKKOdivek/masfOO02EO2uAykItsyr4x9rYaoHb\nNTVvATarkZnd+cLNM4gq3NuSnA==\n-----END PRIVATE KEY-----\n",
    "client_email": "testespun@teste-spun.iam.gserviceaccount.com",
    "client_id": "112339114533944392215",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/testespun%40teste-spun.iam.gserviceaccount.com"
}

# =========================
# DOMÍNIOS
# =========================
DOMAINS = [
    {"domain": "financecaxias.com", "networkCode": "23148707119", "currency": "USD"},
    {"domain": "zienic.com", "networkCode": "22407091784", "currency": "USD"},
    {"domain": "de8.com.br", "networkCode": "22705810042", "currency": "USD"},
    {"domain": "rendademae.com", "networkCode": "22883124850", "currency": "USD"},
    {"domain": "creativepulse23.com", "networkCode": "23144189085", "currency": "USD"},
    {"domain": "agoranamidia.com", "networkCode": "21655197668", "currency": "BRL"},
    {"domain": "guiabancario.com.br", "networkCode": "21655197668", "currency": "BRL"},
    {"domain": "caxiason.com.br", "networkCode": "21655197668", "currency": "BRL"},
    {"domain": "meucartaoideal.com", "networkCode": "21655197668", "currency": "BRL"},
    {"domain": "thecredito.com.br", "networkCode": "21655197668", "currency": "BRL"},
    {"domain": "meucreditoagora.com", "networkCode": "21761578357", "currency": "BRL"},
    {"domain": "genialcredito.com", "networkCode": "21938760094", "currency": "BRL"},
    {"domain": "netdinheiro.com.br", "networkCode": "21629126805", "currency": "BRL"},
    {"domain": "usfinancemore.com", "networkCode": "23158280633", "currency": "BRL"},
    {"domain": "jobscaxias.com", "networkCode": "23158280633", "currency": "BRL"},
]

# =========================
# FUNÇÕES AUXILIARES
# =========================
def safe_float(v, default=0.0):
    if v is None or v == "":
        return default
    try:
        return float(v)
    except:
        try:
            return float(str(v).replace(",", "."))
        except:
            return default

def safe_int(v, default=0):
    try:
        return int(float(v))
    except:
        return default

# =========================
# CONEXÃO GOOGLE SHEETS
# =========================
scopes = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(google_creds, scopes=scopes)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SPREADSHEET_ID)

# =========================
# PEGAR COTAÇÃO DO DÓLAR
# =========================
dollar_sheet_name = "JN_US_CC"
dollar_cell = "O2"
try:
    dollar_ws = sheet.worksheet(dollar_sheet_name)
    EXCHANGE_RATE = safe_float(dollar_ws.acell(dollar_cell).value, default=5.35)
    print(f"Taxa de câmbio obtida: 1 USD = {EXCHANGE_RATE} BRL")
except Exception as e:
    EXCHANGE_RATE = 5.35
    print(f"Erro ao pegar câmbio ({e}). Usando fallback: {EXCHANGE_RATE} BRL")

# =========================
# PREPARAR ABA PRINCIPAL
# =========================
try:
    worksheet = sheet.worksheet(SHEET_NAME)
    worksheet.clear()
except gspread.WorksheetNotFound:
    worksheet = sheet.add_worksheet(title=SHEET_NAME, rows="1000", cols="20")

# =========================
# CABEÇALHO
# =========================
headers = ["Date","Hora","Site","Channel Name","URL","Ad Unit","Requests","Revenue (USD)","Cobertura","eCPM"]
all_rows = []

# =========================
# BUSCAR DADOS DA API
# =========================
for d in DOMAINS:
    payload = {
        "dimensions": ["DATE","HOUR","SITE_NAME","CHANNEL_NAME","URL_NAME","AD_UNIT_NAME"],
        "columns": ["AD_EXCHANGE_TOTAL_REQUESTS","AD_EXCHANGE_LINE_ITEM_LEVEL_REVENUE","AD_EXCHANGE_MATCH_RATE","AD_EXCHANGE_LINE_ITEM_LEVEL_AVERAGE_ECPM"],
        "start_date": DATE_STRING,
        "end_date": DATE_STRING,
        "domain": d["domain"],
        "networkCode": d["networkCode"],
        "site_name": "",
        "channel_name": "utm_source=email,utm_source=activecampaign,utm_source=broadcast,utm_source=newsletter"
    }
    headers_req = {"Authorization": API_TOKEN, "Content-Type": "application/json"}

    resp = requests.post(API_URL, json=payload, headers=headers_req)
    if resp.status_code != 200:
        print(f"Erro no domínio {d['domain']}: {resp.text}")
        continue

    data = resp.json()
    if not isinstance(data, list):
        continue

    for row in data:
        try:
            revenue = safe_float(row.get("Column.AD_EXCHANGE_LINE_ITEM_LEVEL_REVENUE", 0)) / 1_000_000
            ecpm = safe_float(row.get("Column.AD_EXCHANGE_LINE_ITEM_LEVEL_AVERAGE_ECPM", 0)) / 1_000_000
            match_rate = safe_float(row.get("Column.AD_EXCHANGE_MATCH_RATE", 0))
            requests_val = safe_int(row.get("Column.AD_EXCHANGE_TOTAL_REQUESTS", 0))

            if d["currency"] == "BRL" and EXCHANGE_RATE:
                revenue /= EXCHANGE_RATE
                ecpm /= EXCHANGE_RATE

            all_rows.append([
                row.get("Dimension.DATE",""),
                safe_int(row.get("Dimension.HOUR",0)),
                row.get("Dimension.SITE_NAME",""),
                row.get("Dimension.CHANNEL_NAME",""),
                row.get("Dimension.URL_NAME",""),
                row.get("Dimension.AD_UNIT_NAME",""),
                requests_val,
                round(revenue,2),
                round(match_rate,4),
                round(ecpm,2)
            ])
        except Exception as e:
            print(f"Erro processando linha: {e}")

# =========================
# ATUALIZAR PLANILHA
# =========================
if all_rows:
    worksheet.update(values=[headers]+all_rows, range_name="A1")
    print(f"Aba '{SHEET_NAME}' atualizada com {len(all_rows)} linhas.")
else:
    print("Nenhuma linha retornada.")

# =========================
# FIM DO TIMER
# =========================
elapsed_time = time.time() - start_time
minutes, seconds = divmod(elapsed_time, 60)
print(f"⏱ Tempo total: {int(minutes)}m {seconds:.2f}s")